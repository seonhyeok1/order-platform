name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: ./gradlew build

      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/test

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Docker Token
        run: |
          if [ -z "${DOCKERHUB_TOKEN}" ]; then
            echo "❌ DOCKERHUB_TOKEN is empty"
            exit 1
          fi
          echo "✅ Token length: ${#DOCKERHUB_TOKEN}"
          echo "${DOCKERHUB_TOKEN}" | docker login -u tjsgur --password-stdin
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: tjsgur
          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Docker Token Length
#        run: |
#          echo "Token Length: ${#DOCKERHUB_TOKEN}"
#        env:
#          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
#          context: .
          push: true
          tags: tjsgur/order-platform-backend:latest
          secrets: |
            

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:
      - name: SSH and deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull tjsgur/order-platform-backend:latest
            echo "ㅋㅋ"
            docker stop order-backend || true
            docker rm order-backend || true
            docker run -d -p 8080:8080 --name order-backend tjsgur/order-platform-backend:latest
